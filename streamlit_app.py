import streamlit as st
from PIL import Image
import os
import bcrypt
import json
import pandas as pd
import numpy as np
from pathlib import Path
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
import requests
import time
from streamlit_lottie import st_lottie
import random
import sqlite3
from email_validator import validate_email, EmailNotValidError
import logging
from io import BytesIO
import base64

# =============================================
# Configuration and Constants
# =============================================

class Config:
    DB_NAME = "agroai.db"
    MAX_LOGIN_ATTEMPTS = 5
    SESSION_TIMEOUT = 1800  # 30 minutes in seconds
    DEFAULT_FARM_SIZE = 5.0
    ASSETS_DIR = "assets"
    MODEL_DIR = "models"
    MAX_UPLOAD_SIZE = 5  # MB

# Initialize logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Create necessary directories
os.makedirs(Config.ASSETS_DIR, exist_ok=True)
os.makedirs(Config.MODEL_DIR, exist_ok=True)

# =============================================
# Translation System
# =============================================

translations = {
    "en": {
        "login": "ЁЯФР Login", "logout": "ЁЯЪк Logout", "welcome": "тЬЕ Welcome",
        "invalid": "тЭМ Invalid credentials", "username": "Username",
        "password": "Password", "login_button": "Login",
        "logged_as": "Logged in as", "crop_yield": "ЁЯМ┐ Crop Yield",
        "disease_detect": "ЁЯжа Disease Detection", "home": "ЁЯМ╛ Home",
        "features": "ЁЯУМ Features", "about": "ЁЯУЦ About", "contact": "ЁЯУм Contact",
        "team": "Our Team", "upload_leaf": "Upload Leaf Image",
        "analyze": "Analyze", "crop": "Crop", "season": "Season",
        "state": "State", "area": "Area (hectares)", "rainfall": "Rainfall (mm)",
        "fertilizer": "Fertilizer (kg)", "pesticide": "Pesticide (kg)",
        "predict": "Predict Yield", "hero_title": "AgroAI Advisor",
        "hero_subtitle": "Smart Agriculture Assistant",
        "register": "ЁЯУЭ Register", "name": "Full Name",
        "email": "Email", "confirm_password": "Confirm Password",
        "register_button": "Create Account", "have_account": "Already have an account? Login",
        "need_account": "Need an account? Register", "reg_success": "Registration successful! Please login",
        "password_mismatch": "Passwords do not match", "invalid_email": "Please enter a valid email",
        "yield_form_title": "Crop Yield Calculator",
        "disease_form_title": "Plant Disease Scanner",
        "camera_instructions": "Point your camera at a plant leaf and capture an image",
        "capture_button": "Capture Image",
        "analyze_button": "Analyze Capture",
        "treatment_title": "ЁЯМ▒ Treatment Recommendations",
        "treatment_advice": [
            "Remove and destroy infected plants to prevent spread",
            "Apply appropriate fungicide/insecticide as recommended",
            "Improve air circulation around plants by proper spacing",
            "Maintain proper watering schedule (avoid overwatering)"
        ],
        "yield_tips_title": "ЁЯТб Yield Optimization Tips",
        "yield_tips": [
            "Implement crop rotation to maintain soil health and reduce pests",
            "Monitor soil moisture levels regularly with smart sensors",
            "Use organic fertilizers to improve long-term soil fertility",
            "Adopt integrated pest management strategies for sustainable farming"
        ],
        "dashboard_title": "ЁЯУК Analytics Dashboard",
        "weather_title": "ЁЯМжя╕П Weather Forecast",
        "features_title": "ЁЯМЯ Key Features",
        "about_title": "ЁЯУЦ About Us",
        "contact_title": "ЁЯУм Contact Us",
        "mission": "Our Mission",
        "vision": "Our Vision",
        "mission_text": "Empowering farmers with AI-driven insights for sustainable agriculture",
        "vision_text": "Transforming traditional farming through cutting-edge technology",
        "contact_info": [
            "ЁЯУз Email: smartagro@gmail.com",
            "ЁЯУЮ Phone: +91-xxxxxxxxx",
            "ЁЯМР Website: www.smartagro.com",
            "ЁЯУН Address: Maharashtra,India"
        ],
        "profile": "ЁЯСд Profile",
        "farm_size": "Farm Size (hectares)",
        "location": "Farm Location",
        "save_profile": "Save Profile",
        "crop_history": "ЁЯУЕ Crop History",
        "add_crop": "тЮХ Add Crop Record",
        "crop_name": "Crop Name",
        "planting_date": "Planting Date",
        "harvest_date": "Harvest Date",
        "yield_amount": "Yield (tons)",
        "notes": "Notes",
        "add_record": "Add Record",
        "no_records": "No crop records found",
        "weather_alerts": "тЪая╕П Weather Alerts",
        "soil_health": "ЁЯМ▒ Soil Health",
        "market_prices": "ЁЯТ▓ Market Prices",
        "language": "Language",
        "unknown": "Unknown",
        "yield_prediction_desc": "Predict harvest amounts based on environmental factors",
        "disease_detection_desc": "Identify plant diseases from leaf images",
        "analytics_desc": "View historical data and trends",
        "weather_desc": "Get localized weather forecasts",
        "soil_health_desc": "Get recommendations for soil improvement",
        "market_insights_desc": "View crop prices and market trends",
        "team_members": [
            {"name": "Vaishnavi Borse", "role": "Full Stack Developer", "bio": "B.Tech in Computer Science"},
            {"name": "Pranjali Patil", "role": "Frontend Developer", "bio": "B.Tech in Computer Science"},
            {"name": "Maithili Pawar", "role": "Frontend Developer", "bio": "B.Tech in Computer Science"},
            {"name": "Yuvraj Rajure", "role": "ML Developer", "bio": "B.Tech in Computer Science"},
            {"name": "Hardik Sonawane", "role": "ML Developer", "bio": "B.Tech in Computer Science"}
        ]
    },
    "hi": {
        "login": "ЁЯФР рд▓реЙрдЧрд┐рди", 
        "logout": "ЁЯЪк рд▓реЙрдЧрдЖрдЙрдЯ", 
        "welcome": "тЬЕ рд╕реНрд╡рд╛рдЧрдд рд╣реИ",
        "invalid": "тЭМ рдЕрдорд╛рдиреНрдп рдкреНрд░рдорд╛рдг", 
        "username": "рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдирд╛рдо",
        "password": "рдкрд╛рд╕рд╡рд░реНрдб", 
        "login_button": "рд▓реЙрдЧрд┐рди",
        "logged_as": "рд▓реЙрдЧрд┐рди рдХрд┐рдпрд╛ рдЧрдпрд╛", 
        "crop_yield": "ЁЯМ┐ рдлрд╕рд▓ рдЙрдкрдЬ",
        "disease_detect": "ЁЯжа рд░реЛрдЧ рдкрд╣рдЪрд╛рди", 
        "home": "ЁЯМ╛ рд╣реЛрдо",
        "features": "ЁЯУМ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ", 
        "about": "ЁЯУЦ рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ", 
        "contact": "ЁЯУм рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
        "team": "рд╣рдорд╛рд░реА рдЯреАрдо", 
        "upload_leaf": "рдкрддреНрддреА рдХреА рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        "analyze": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг", 
        "crop": "рдлрд╕рд▓", 
        "season": "рдореМрд╕рдо",
        "state": "рд░рд╛рдЬреНрдп", 
        "area": "рдХреНрд╖реЗрддреНрд░ (рд╣реЗрдХреНрдЯреЗрдпрд░)", 
        "rainfall": "рд╡рд░реНрд╖рд╛ (рдорд┐рдореА)",
        "fertilizer": "рдЙрд░реНрд╡рд░рдХ (рдХрд┐рд▓реЛ)", 
        "pesticide": "рдХреАрдЯрдирд╛рд╢рдХ (рдХрд┐рд▓реЛ)",
        "predict": "рдЙрдкрдЬ рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдВ", 
        "hero_title": "рдПрдЧреНрд░реЛрдПрдЖрдИ рд╕рд▓рд╛рд╣рдХрд╛рд░",
        "hero_subtitle": "рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ",
        "register": "ЁЯУЭ рдкрдВрдЬреАрдХрд░рдг", 
        "name": "рдкреВрд░рд╛ рдирд╛рдо",
        "email": "рдИрдореЗрд▓", 
        "confirm_password": "рдкрд╛рд╕рд╡рд░реНрдб рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ",
        "register_button": "рдЦрд╛рддрд╛ рдмрдирд╛рдПрдВ", 
        "have_account": "рдкрд╣рд▓реЗ рд╕реЗ рдЦрд╛рддрд╛ рд╣реИ? рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ",
        "need_account": "рдЦрд╛рддрд╛ рдЪрд╛рд╣рд┐рдП? рдкрдВрдЬреАрдХрд░рдг рдХрд░реЗрдВ", 
        "reg_success": "рдкрдВрдЬреАрдХрд░рдг рд╕рдлрд▓! рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВ",
        "password_mismatch": "рдкрд╛рд╕рд╡рд░реНрдб рдореЗрд▓ рдирд╣реАрдВ рдЦрд╛рддреЗ", 
        "invalid_email": "рдХреГрдкрдпрд╛ рдорд╛рдиреНрдп рдИрдореЗрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ",
        "yield_form_title": "рдлрд╕рд▓ рдЙрдкрдЬ рдХреИрд▓рдХреБрд▓реЗрдЯрд░",
        "disease_form_title": "рдкреМрдзреЗ рдХреА рдмреАрдорд╛рд░реА рд╕реНрдХреИрдирд░",
        "camera_instructions": "рдкреМрдзреЗ рдХреА рдкрддреНрддреА рдкрд░ рдЕрдкрдирд╛ рдХреИрдорд░рд╛ рд▓рдЧрд╛рдПрдВ рдФрд░ рдЫрд╡рд┐ рдХреИрдкреНрдЪрд░ рдХрд░реЗрдВ",
        "capture_button": "рдЫрд╡рд┐ рдХреИрдкреНрдЪрд░ рдХрд░реЗрдВ",
        "analyze_button": "рдХреИрдкреНрдЪрд░ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
        "treatment_title": "ЁЯМ▒ рдЙрдкрдЪрд╛рд░ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ",
        "treatment_advice": [
            "рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛рдХрд░ рдирд╖реНрдЯ рдХрд░ рджреЗрдВ рддрд╛рдХрд┐ рдмреАрдорд╛рд░реА рди рдлреИрд▓реЗ",
            "рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдЙрдЪрд┐рдд рдлрдлреВрдВрджрдирд╛рд╢рдХ/рдХреАрдЯрдирд╛рд╢рдХ рд▓рдЧрд╛рдПрдВ",
            "рдкреМрдзреЛрдВ рдХреЗ рдЖрд╕рдкрд╛рд╕ рдЙрдЪрд┐рдд рджреВрд░реА рд░рдЦрдХрд░ рд╣рд╡рд╛ рдХрд╛ рд╕рдВрдЪрд╛рд░ рдмреЗрд╣рддрд░ рдХрд░реЗрдВ",
            "рдЙрдЪрд┐рдд рдкрд╛рдиреА рджреЗрдиреЗ рдХрд╛ рд╕рдордп рдмрдирд╛рдП рд░рдЦреЗрдВ (рдЕрдзрд┐рдХ рдкрд╛рдиреА рджреЗрдиреЗ рд╕реЗ рдмрдЪреЗрдВ)"
        ],
        "yield_tips_title": "ЁЯТб рдЙрдкрдЬ рдЕрдиреБрдХреВрд▓рди рд╕реБрдЭрд╛рд╡",
        "yield_tips": [
            "рдорд┐рдЯреНрдЯреА рдХреА рд╕реЗрд╣рдд рдмрдирд╛рдП рд░рдЦрдиреЗ рдФрд░ рдХреАрдЯреЛрдВ рдХреЛ рдХрдо рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдлрд╕рд▓ рдЪрдХреНрд░ рдЕрдкрдирд╛рдПрдВ",
            "рд╕реНрдорд╛рд░реНрдЯ рд╕реЗрдВрд╕рд░ рд╕реЗ рдирд┐рдпрдорд┐рдд рд░реВрдк рд╕реЗ рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рдХреА рдЬрд╛рдВрдЪ рдХрд░реЗрдВ",
            "рд▓рдВрдмреЗ рд╕рдордп рддрдХ рдорд┐рдЯреНрдЯреА рдХреА рдЙрд░реНрд╡рд░рддрд╛ рдмрдврд╝рд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЬреИрд╡рд┐рдХ рдЙрд░реНрд╡рд░рдХреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ",
            "рдЯрд┐рдХрд╛рдК рдЦреЗрддреА рдХреЗ рд▓рд┐рдП рдПрдХреАрдХреГрдд рдХреАрдЯ рдкреНрд░рдмрдВрдзрди рд░рдгрдиреАрддрд┐рдпреЛрдВ рдХреЛ рдЕрдкрдирд╛рдПрдВ"
        ],
        "dashboard_title": "ЁЯУК рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдбреИрд╢рдмреЛрд░реНрдб",
        "weather_title": "ЁЯМжя╕П рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди",
        "features_title": "ЁЯМЯ рдкреНрд░рдореБрдЦ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ",
        "about_title": "ЁЯУЦ рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ",
        "contact_title": "ЁЯУм рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ",
        "mission": "рд╣рдорд╛рд░рд╛ рдорд┐рд╢рди",
        "vision": "рд╣рдорд╛рд░реА рджреГрд╖реНрдЯрд┐",
        "mission_text": "рдЯрд┐рдХрд╛рдК рдХреГрд╖рд┐ рдХреЗ рд▓рд┐рдП рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдХреЗ рд╕рд╛рде рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕рд╢рдХреНрдд рдмрдирд╛рдирд╛",
        "vision_text": "рдЕрддреНрдпрд╛рдзреБрдирд┐рдХ рддрдХрдиреАрдХ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдкрд╛рд░рдВрдкрд╛рд░рд┐рдХ рдЦреЗрддреА рдХреЛ рдмрджрд▓рдирд╛",
        "contact_info": [
            "ЁЯУз рдИрдореЗрд▓: smartagro@gmail.com", 
            "ЁЯУЮ рдлрд╝реЛрди: +91-xxxxxxxxx",
            "ЁЯМР рд╡реЗрдмрд╕рд╛рдЗрдЯ: www.smartagro.com", 
            "ЁЯУН рдкрддрд╛: рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░, рднрд╛рд░рдд"
        ],
        "profile": "ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓",
        "farm_size": "рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ (рд╣реЗрдХреНрдЯреЗрдпрд░)",
        "location": "рдЦреЗрдд рдХрд╛ рд╕реНрдерд╛рди",
        "save_profile": "рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕рд╣реЗрдЬреЗрдВ",
        "crop_history": "ЁЯУЕ рдлрд╕рд▓ рдЗрддрд┐рд╣рд╛рд╕",
        "add_crop": "тЮХ рдлрд╕рд▓ рд░рд┐рдХреЙрд░реНрдб рдЬреЛрдбрд╝реЗрдВ",
        "crop_name": "рдлрд╕рд▓ рдХрд╛ рдирд╛рдо",
        "planting_date": "рд░реЛрдкрдг рдХреА рддрд╛рд░реАрдЦ",
        "harvest_date": "рдХрдЯрд╛рдИ рдХреА рддрд╛рд░реАрдЦ",
        "yield_amount": "рдЙрдкрдЬ (рдЯрди)",
        "notes": "рдЯрд┐рдкреНрдкрдгрд┐рдпрд╛рдБ",
        "add_record": "рд░рд┐рдХреЙрд░реНрдб рдЬреЛрдбрд╝реЗрдВ",
        "no_records": "рдХреЛрдИ рдлрд╕рд▓ рд░рд┐рдХреЙрд░реНрдб рдирд╣реАрдВ рдорд┐рд▓рд╛",
        "weather_alerts": "тЪая╕П рдореМрд╕рдо рдЪреЗрддрд╛рд╡рдиреА",
        "soil_health": "ЁЯМ▒ рдорд┐рдЯреНрдЯреА рдХреА рд╕реЗрд╣рдд",
        "market_prices": "ЁЯТ▓ рдмрд╛рдЬрд╛рд░ рдХреАрдорддреЗрдВ",
        "language": "рднрд╛рд╖рд╛",
        "unknown": "рдЕрдЬреНрдЮрд╛рдд",
        "yield_prediction_desc": "рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдХрд╛рд░рдХреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдлрд╕рд▓ рдЙрдкрдЬ рдХрд╛ рдЕрдиреБрдорд╛рди рд▓рдЧрд╛рдПрдВ",
        "disease_detection_desc": "рдкрддреНрддреА рдХреА рдЫрд╡рд┐рдпреЛрдВ рд╕реЗ рдкреМрдзреЛрдВ рдХреА рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреА рдкрд╣рдЪрд╛рди рдХрд░реЗрдВ",
        "analytics_desc": "рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдбреЗрдЯрд╛ рдФрд░ рд░реБрдЭрд╛рди рджреЗрдЦреЗрдВ",
        "weather_desc": "рд╕реНрдерд╛рдиреАрдп рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "soil_health_desc": "рдорд┐рдЯреНрдЯреА рдореЗрдВ рд╕реБрдзрд╛рд░ рдХреЗ рд▓рд┐рдП рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ",
        "market_insights_desc": "рдлрд╕рд▓ рдХреА рдХреАрдорддреЗрдВ рдФрд░ рдмрд╛рдЬрд╛рд░ рдХреЗ рд░реБрдЭрд╛рди рджреЗрдЦреЗрдВ",
        "team_members": [
            {"name": "рд╡реИрд╖реНрдгрд╡реА рдмреЛрд░рд╕реЗ", "role": "рдлреБрд▓ рд╕реНрдЯреИрдХ рдбреЗрд╡рд▓рдкрд░", "bio": "рдХрдВрдкреНрдпреВрдЯрд░ рд╕рд╛рдЗрдВрд╕ рдореЗрдВ рдмреА.рдЯреЗрдХ"},  
            {"name": "рдкреНрд░рд╛рдВрдЬрд▓реА рдкрд╛рдЯрд┐рд▓", "role": "рдлреНрд░рдВрдЯрдПрдВрдб рдбреЗрд╡рд▓рдкрд░", "bio": "рдХрдВрдкреНрдпреВрдЯрд░ рд╕рд╛рдЗрдВрд╕ рдореЗрдВ рдмреА.рдЯреЗрдХ"},  
            {"name": "рдореИрдерд┐рд▓реА рдкрд╡рд╛рд░", "role": "рдлреНрд░рдВрдЯрдПрдВрдб рдбреЗрд╡рд▓рдкрд░", "bio": "рдХрдВрдкреНрдпреВрдЯрд░ рд╕рд╛рдЗрдВрд╕ рдореЗрдВ рдмреА.рдЯреЗрдХ"},  
            {"name": "рдпреБрд╡рд░рд╛рдЬ рд░рдЬреБрд░реЗ", "role": "рдПрдордПрд▓ рдбреЗрд╡рд▓рдкрд░", "bio": "рдХрдВрдкреНрдпреВрдЯрд░ рд╕рд╛рдЗрдВрд╕ рдореЗрдВ рдмреА.рдЯреЗрдХ"},  
            {"name": "рд╣рд╛рд░реНрджрд┐рдХ рд╕реЛрдирд╡рдгреЗ", "role": "рдПрдордПрд▓ рдбреЗрд╡рд▓рдкрд░", "bio": "рдХрдВрдкреНрдпреВрдЯрд░ рд╕рд╛рдЗрдВрд╕ рдореЗрдВ рдмреА.рдЯреЗрдХ"}  
        ]
    },
    "mr": {
        "login": "ЁЯФР рд▓реЙрдЧрд┐рди", 
        "logout": "ЁЯЪк рд▓реЙрдЧрдЖрдЙрдЯ", 
        "welcome": "тЬЕ рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ",
        "invalid": "тЭМ рдЕрд╡реИрдз рдкреНрд░рдорд╛рдгрдкрддреНрд░реЗ", 
        "username": "рд╡рд╛рдкрд░рдХрд░реНрддрд╛рдирд╛рд╡",
        "password": "рдкрд╛рд╕рд╡рд░реНрдб", 
        "login_button": "рд▓реЙрдЧрд┐рди",
        "logged_as": "рд▓реЙрдЧрд┐рди рдХреЗрд▓реЗ", 
        "crop_yield": "ЁЯМ┐ рдкреАрдХ рдЙрддреНрдкрдиреНрди",
        "disease_detect": "ЁЯжа рд░реЛрдЧ рдУрд│рдЦ", 
        "home": "ЁЯМ╛ рд╣реЛрдо",
        "features": "ЁЯУМ рд╡реИрд╢рд┐рд╖реНрдЯреНрдпреЗ", 
        "about": "ЁЯУЦ рдЖрдордЪреНрдпрд╛рдмрджреНрджрд▓", 
        "contact": "ЁЯУм рд╕рдВрдкрд░реНрдХ",
        "team": "рдЖрдордЪреА рд╕рдВрдШ", 
        "upload_leaf": "рдкрд╛рдирд╛рдЪреА рдкреНрд░рддрд┐рдорд╛ рдЕрдкрд▓реЛрдб рдХрд░рд╛",
        "analyze": "рд╡рд┐рд╢реНрд▓реЗрд╖рдг", 
        "crop": "рдкреАрдХ", 
        "season": "рд╣рдВрдЧрд╛рдо",
        "state": "рд░рд╛рдЬреНрдп", 
        "area": "рдХреНрд╖реЗрддреНрд░ (рд╣реЗрдХреНрдЯрд░)", 
        "rainfall": "рдкрд╛рдКрд╕ (рдорд┐рдореА)",
        "fertilizer": "рдЦрдд (рдХрд┐рд▓реЛ)", 
        "pesticide": "рдХреАрдЯрдХрдирд╛рд╢рдХ (рдХрд┐рд▓реЛ)",
        "predict": "рдЙрддреНрдкрдиреНрдирд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ рд▓рд╛рд╡рд╛", 
        "hero_title": "рдЕреЕрдЧреНрд░реЛрдПрдЖрдИ рд╕рд▓реНрд▓рд╛рдЧрд╛рд░",
        "hero_subtitle": "рд╕реНрдорд╛рд░реНрдЯ рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ",
        "register": "ЁЯУЭ рдиреЛрдВрджрдгреА", 
        "name": "рдкреВрд░реНрдг рдирд╛рд╡",
        "email": "рдИрдореЗрд▓", 
        "confirm_password": "рдкрд╛рд╕рд╡рд░реНрдбрдЪреА рдкреБрд╖реНрдЯреА рдХрд░рд╛",
        "register_button": "рдЦрд╛рддреЗ рддрдпрд╛рд░ рдХрд░рд╛", 
        "have_account": "рдЖрдзреАрдкрд╛рд╕реВрди рдЦрд╛рддреЗ рдЖрд╣реЗ? рд▓реЙрдЧрд┐рди рдХрд░рд╛",
        "need_account": "рдЦрд╛рддреЗ рд╣рд╡реЗ? рдиреЛрдВрджрдгреА рдХрд░рд╛", 
        "reg_success": "рдиреЛрдВрджрдгреА рдпрд╢рд╕реНрд╡реА! рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░рд╛",
        "password_mismatch": "рдкрд╛рд╕рд╡рд░реНрдб рдЬреБрд│рдд рдирд╛рд╣реАрдд", 
        "invalid_email": "рдХреГрдкрдпрд╛ рд╡реИрдз рдИрдореЗрд▓ рдЯрд╛рдХрд╛",
        "yield_form_title": "рдкреАрдХ рдЙрддреНрдкрдиреНрди рдХреЕрд▓реНрдХреНрдпреБрд▓реЗрдЯрд░",
        "disease_form_title": "рд╡рдирд╕реНрдкрддреА рд░реЛрдЧ рд╕реНрдХреЕрдирд░",
        "camera_instructions": "рд╡рдирд╕реНрдкрддреАрдЪреНрдпрд╛ рдкрд╛рдирд╛рд╡рд░ рдХреЕрдореЗрд░рд╛ рд▓рд╛рд╡рд╛ рдЖрдгрд┐ рдкреНрд░рддрд┐рдорд╛ рдХреЕрдкреНрдЪрд░ рдХрд░рд╛",
        "capture_button": "рдкреНрд░рддрд┐рдорд╛ рдХреЕрдкреНрдЪрд░ рдХрд░рд╛",
        "analyze_button": "рдХреЕрдкреНрдЪрд░рдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рд╛",
        "treatment_title": "ЁЯМ▒ рдЙрдкрдЪрд╛рд░ рд╢рд┐рдлрд╛рд░рд╕реА",
        "treatment_advice": [
            "рд╕рдВрд╕рд░реНрдЧ рдЭрд╛рд▓реЗрд▓реНрдпрд╛ рд╡рдирд╕реНрдкрддреА рдХрд╛рдвреВрди рдЯрд╛рдХрд╛ рдЖрдгрд┐ рдирд╖реНрдЯ рдХрд░рд╛ рдЬреЗрдгреЗрдХрд░реВрди рд░реЛрдЧ рдкрд╕рд░реВ рдирдпреЗ",
            "рд╢рд┐рдлрд╛рд░рд╕ рдХреЗрд▓реНрдпрд╛рдкреНрд░рдорд╛рдгреЗ рдпреЛрдЧреНрдп рдлрдВрдЧрд┐рд╕рд╛рдЗрдб/рдХреАрдЯрдХрдирд╛рд╢рдХ рд╡рд╛рдкрд░рд╛",
            "рдпреЛрдЧреНрдп рдЕрдВрддрд░ рдареЗрд╡реВрди рд╡рдирд╕реНрдкрддреАрдВрдЪреНрдпрд╛ рдЖрдЬреВрдмрд╛рдЬреВрд▓рд╛ рд╣рд╡реЗрдЪреА рдЪрд╛рдВрдЧрд▓реА рдлреЗрд░рдлрдЯрдХрд╛ рдХрд░рд╛",
            "рдпреЛрдЧреНрдп рдкрд╛рдгреА рджреЗрдгреНрдпрд╛рдЪреЗ рд╡реЗрд│рд╛рдкрддреНрд░рдХ рд░рд╛рдЦрд╛ (рдЬрд╛рд╕реНрдд рдкрд╛рдгреА рджреЗрдгреЗ рдЯрд╛рд│рд╛)"
        ],
        "yield_tips_title": "ЁЯТб рдЙрддреНрдкрдиреНрди рд╡рд╛рдврд╡рдгреНрдпрд╛рдЪреА рдЯрд┐рдкреНрд╕",
        "yield_tips": [
            "рдорд╛рддреАрдЪреЗ рдЖрд░реЛрдЧреНрдп рд░рд╛рдЦрдгреНрдпрд╛рд╕рд╛рдареА рдЖрдгрд┐ рдХреАрдЯрдХ рдХрдореА рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА рдкрд┐рдХрд╛рдВрдЪреА рдлреЗрд░рдкрд╛рд▓рдЯ рдХрд░рд╛",
            "рд╕реНрдорд╛рд░реНрдЯ рд╕реЗрдиреНрд╕рд░рдЪреНрдпрд╛ рдорджрддреАрдиреЗ рдирд┐рдпрдорд┐рддрдкрдгреЗ рдорд╛рддреАрддреАрд▓ рдУрд▓рд╛рд╡рд╛ рддрдкрд╛рд╕рд╛",
            "рджреАрд░реНрдШрдХрд╛рд│рд╛рдкрд░реНрдпрдВрдд рдорд╛рддреАрдЪреА рд╕реБрдкреАрдХрддрд╛ рд╡рд╛рдврд╡рдгреНрдпрд╛рд╕рд╛рдареА рд╕реЗрдВрджреНрд░рд┐рдп рдЦрддреЗ рд╡рд╛рдкрд░рд╛",
            "рдЯрд┐рдХрд╛рдК рд╢реЗрддреАрд╕рд╛рдареА рдПрдХрд╛рддреНрдорд┐рдХ рдХреАрдЯрдХ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди рдзреЛрд░рдгреЗ рд╕реНрд╡реАрдХрд╛рд░рд╛"
        ],
        "dashboard_title": "ЁЯУК рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдбреЕрд╢рдмреЛрд░реНрдб",
        "weather_title": "ЁЯМжя╕П рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ",
        "features_title": "ЁЯМЯ рдкреНрд░рдореБрдЦ рд╡реИрд╢рд┐рд╖реНрдЯреНрдпреЗ",
        "about_title": "ЁЯУЦ рдЖрдордЪреНрдпрд╛рдмрджреНрджрд▓",
        "contact_title": "ЁЯУм рд╕рдВрдкрд░реНрдХ",
        "mission": "рдЖрдордЪреЗ рдорд┐рд╢рди",
        "vision": "рдЖрдордЪреЗ рджреГрд╖реНрдЯреАрдХреЛрди",
        "mission_text": "рд╢рд╛рд╢реНрд╡рдд рд╢реЗрддреАрд╕рд╛рдареА AI-рдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯреАрд╕рд╣ рд╢реЗрддрдХрд▒реНрдпрд╛рдВрдирд╛ рд╕рдХреНрд╖рдо рдХрд░рдгреЗ",
        "vision_text": "рдЕрддреНрдпрд╛рдзреБрдирд┐рдХ рддрдВрддреНрд░рдЬреНрдЮрд╛рдирд╛рджреНрд╡рд╛рд░реЗ рдкрд╛рд░рдВрдкрд╛рд░рд┐рдХ рд╢реЗрддреАрдЪреЗ рд░реВрдкрд╛рдВрддрд░",
        "contact_info": [
            "ЁЯУз рдИрдореЗрд▓: smartagro@gmail.com",
            "ЁЯУЮ рдлреЛрди: +91-xxxxxxxxx",
            "ЁЯМР рд╡реЗрдмрд╕рд╛рдЗрдЯ: www.smartagro.com",
            "ЁЯУН рдкрддреНрддрд╛: рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░, рднрд╛рд░рдд"
        ],
        "profile": "ЁЯСд рдкреНрд░реЛрдлрд╛рдЗрд▓",
        "farm_size": "рд╢реЗрддрд╛рдЪреЗ рдХреНрд╖реЗрддреНрд░ (рд╣реЗрдХреНрдЯрд░)",
        "location": "рд╢реЗрддрд╛рдЪреЗ рд╕реНрдерд╛рди",
        "save_profile": "рдкреНрд░реЛрдлрд╛рдЗрд▓ рдЬрддрди рдХрд░рд╛",
        "crop_history": "ЁЯУЕ рдкреАрдХ рдЗрддрд┐рд╣рд╛рд╕",
        "add_crop": "тЮХ рдкреАрдХ рдиреЛрдВрдж рдЬреЛрдбрд╛",
        "crop_name": "рдкрд┐рдХрд╛рдЪреЗ рдирд╛рд╡",
        "planting_date": "рд▓рд╛рдЧрд╡рдбреАрдЪреА рддрд╛рд░реАрдЦ",
        "harvest_date": "рдХрд╛рдкрдгреАрдЪреА рддрд╛рд░реАрдЦ",
        "yield_amount": "рдЙрддреНрдкрдиреНрди (рдЯрди)",
        "notes": "рдиреЛрдЯреНрд╕",
        "add_record": "рдиреЛрдВрдж рдЬреЛрдбрд╛",
        "no_records": "рдкреАрдХ рдиреЛрдВрджреА рд╕рд╛рдкрдбрд▓реНрдпрд╛ рдирд╛рд╣реАрдд",
        "weather_alerts": "тЪая╕П рд╣рд╡рд╛рдорд╛рди рд╕рддрд░реНрдХрддрд╛",
        "soil_health": "ЁЯМ▒ рдорд╛рддреАрдЪреЗ рдЖрд░реЛрдЧреНрдп",
        "market_prices": "ЁЯТ▓ рдмрд╛рдЬрд╛рд░рднрд╛рд╡",
        "language": "рднрд╛рд╖рд╛",
        "unknown": "рдЕрдЬреНрдЮрд╛рдд",
        "yield_prediction_desc": "рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдШрдЯрдХрд╛рдВрд╡рд░ рдЖрдзрд╛рд░рд┐рдд рдкреАрдХ рдЙрддреНрдкрдиреНрдирд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ рд▓рд╛рд╡рд╛",
        "disease_detection_desc": "рдкрд╛рдирд╛рдВрдЪреНрдпрд╛ рдкреНрд░рддрд┐рдорд╛рдВрд╡рд░реВрди рд╡рдирд╕реНрдкрддреА рд░реЛрдЧ рдУрд│рдЦрд╛",
        "analytics_desc": "рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдбреЗрдЯрд╛ рдЖрдгрд┐ рдЯреНрд░реЗрдВрдб рдкрд╣рд╛",
        "weather_desc": "рд╕реНрдерд╛рдирд┐рдХ рд╣рд╡рд╛рдорд╛рди рдЕрдВрджрд╛рдЬ рдорд┐рд│рд╡рд╛",
        "soil_health_desc": "рдорд╛рддреАрдЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдпрд╛рд╕рд╛рдареА рд╢рд┐рдлрд╛рд░рд╕реА рдорд┐рд│рд╡рд╛",
        "market_insights_desc": "рдкрд┐рдХрд╛рдВрдЪреНрдпрд╛ рдХрд┐рдВрдорддреА рдЖрдгрд┐ рдмрд╛рдЬрд╛рд░рд╛рддреАрд▓ рдЯреНрд░реЗрдВрдб рдкрд╣рд╛",
        "team_members": [
            {"name": "рд╡реИрд╖реНрдгрд╡реА рдмреЛрд░рд╕реЗ", "role": "рдлреБрд▓ рд╕реНрдЯреЕрдХ рдбреЗрд╡реНрд╣рд▓рдкрд░", "bio": "рд╕рдВрдЧрдгрдХ рд╢рд╛рд╕реНрддреНрд░рд╛рдд рдмреА.рдЯреЗрдХ"},  
            {"name": "рдкреНрд░рд╛рдВрдЬрд▓реА рдкрд╛рдЯреАрд▓", "role": "рдлреНрд░рдВрдЯрдПрдВрдб рдбреЗрд╡реНрд╣рд▓рдкрд░", "bio": "рд╕рдВрдЧрдгрдХ рд╢рд╛рд╕реНрддреНрд░рд╛рдд рдмреА.рдЯреЗрдХ"},  
            {"name": "рдореИрдерд┐рд▓реА рдкрд╡рд╛рд░", "role": "рдлреНрд░рдВрдЯрдПрдВрдб рдбреЗрд╡реНрд╣рд▓рдкрд░", "bio": "рд╕рдВрдЧрдгрдХ рд╢рд╛рд╕реНрддреНрд░рд╛рдд рдмреА.рдЯреЗрдХ"},  
            {"name": "рдпреБрд╡рд░рд╛рдЬ рд░рдЬреБрд░реЗ", "role": "рдПрдордПрд▓ рдбреЗрд╡реНрд╣рд▓рдкрд░", "bio": "рд╕рдВрдЧрдгрдХ рд╢рд╛рд╕реНрддреНрд░рд╛рдд рдмреА.рдЯреЗрдХ"},  
            {"name": "рд╣рд╛рд░реНрджрд┐рдХ рд╕реЛрдирд╡рдгреЗ", "role": "рдПрдордПрд▓ рдбреЗрд╡реНрд╣рд▓рдкрд░", "bio": "рд╕рдВрдЧрдгрдХ рд╢рд╛рд╕реНрддреНрд░рд╛рдд рдмреА.рдЯреЗрдХ"}  
        ]
    }
}

def t(key, lang=None, default=None):
    """Get translation for the given key in the specified language"""
    if lang is None:
        lang = st.session_state.get('language', 'en')
    return translations.get(lang, {}).get(key, default or key)

# =============================================
# Database Functions
# =============================================

def init_db():
    """Initialize the SQLite database with required tables"""
    try:
        conn = sqlite3.connect(Config.DB_NAME)
        c = conn.cursor()
        
        # Users table
        c.execute('''CREATE TABLE IF NOT EXISTS users
                    (username TEXT PRIMARY KEY,
                     password TEXT NOT NULL,
                     name TEXT NOT NULL,
                     email TEXT UNIQUE NOT NULL,
                     role TEXT DEFAULT 'user',
                     farm_size REAL DEFAULT 5.0,
                     location TEXT,
                     login_attempts INTEGER DEFAULT 0,
                     last_login TIMESTAMP,
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        # Crop history table
        c.execute('''CREATE TABLE IF NOT EXISTS crop_history
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     username TEXT NOT NULL,
                     crop TEXT NOT NULL,
                     planted_date TEXT NOT NULL,
                     harvested_date TEXT,
                     yield_amount REAL,
                     notes TEXT,
                     FOREIGN KEY(username) REFERENCES users(username))''')
        
        # Disease detection history
        c.execute('''CREATE TABLE IF NOT EXISTS disease_history
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     username TEXT NOT NULL,
                     image_path TEXT NOT NULL,
                     detection_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     disease_name TEXT,
                     confidence REAL,
                     treatment_advice TEXT,
                     FOREIGN KEY(username) REFERENCES users(username))''')
        
        # Weather cache
        c.execute('''CREATE TABLE IF NOT EXISTS weather_cache
                    (location TEXT PRIMARY KEY,
                     data TEXT NOT NULL,
                     last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        
        conn.commit()
        
        # Check if admin exists
        c.execute("SELECT username FROM users WHERE role='admin'")
        if not c.fetchone():
            hashed_pw = hash_password("admin123")
            c.execute('''INSERT INTO users 
                        (username, password, name, email, role, farm_size, location)
                        VALUES (?, ?, ?, ?, ?, ?, ?)''',
                     ('admin', hashed_pw, 'Admin User', 'admin@smartagro.com', 
                      'admin', 10.0, 'Pune, India'))
            conn.commit()
            
    except sqlite3.Error as e:
        logger.error(f"Database initialization error: {str(e)}")
        raise
    finally:
        if conn:
            conn.close()

def get_db_connection():
    """Get a database connection with row factory"""
    conn = sqlite3.connect(Config.DB_NAME)
    conn.row_factory = sqlite3.Row
    return conn

# =============================================
# Authentication Functions
# =============================================

def hash_password(password):
    """Hash password using bcrypt"""
    return bcrypt.hashpw(password.encode(), bcrypt.gensalt()).decode()

def check_password(hashed_password, user_password):
    """Check hashed password against user input"""
    return bcrypt.checkpw(user_password.encode(), hashed_password.encode())

def validate_email_address(email):
    """Validate email format using email-validator"""
    try:
        v = validate_email(email)
        return v["email"]
    except EmailNotValidError as e:
        logger.warning(f"Email validation failed: {str(e)}")
        return False

def register_user(username, password, name, email, farm_size, location, role="user"):
    """Register a new user"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        # Validate inputs
        if not username or not password or not name or not email:
            return False, t('all_fields_required')
        
        if len(password) < 8:
            return False, t('password_length_error')
        
        valid_email = validate_email_address(email)
        if not valid_email:
            return False, t('invalid_email')
        
        # Check if username or email exists
        c.execute("SELECT username FROM users WHERE username = ?", (username,))
        if c.fetchone():
            return False, t('username_exists')
        
        c.execute("SELECT email FROM users WHERE email = ?", (valid_email,))
        if c.fetchone():
            return False, t('email_exists')
        
        # Insert new user
        hashed_pw = hash_password(password)
        c.execute('''INSERT INTO users 
                    (username, password, name, email, farm_size, location, role)
                    VALUES (?, ?, ?, ?, ?, ?, ?)''',
                 (username, hashed_pw, name, valid_email, farm_size, location, role))
        conn.commit()
        
        logger.info(f"New user registered: {username}")
        return True, t('reg_success')
        
    except sqlite3.Error as e:
        logger.error(f"Registration error: {str(e)}")
        return False, t('database_error')
    finally:
        if conn:
            conn.close()

def login_user(username, password):
    """Authenticate user"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        # Check login attempts
        c.execute('''SELECT login_attempts, last_login 
                     FROM users WHERE username = ?''', (username,))
        result = c.fetchone()
        
        if result and result['login_attempts'] >= Config.MAX_LOGIN_ATTEMPTS:
            last_login = datetime.strptime(result['last_login'], '%Y-%m-%d %H:%M:%S')
            if (datetime.now() - last_login).seconds < 3600:  # 1 hour lockout
                return False, t('account_locked')
        
        # Get user credentials
        c.execute('''SELECT username, password, role, name, email, farm_size, location 
                     FROM users WHERE username = ?''', (username,))
        user = c.fetchone()
        
        if not user:
            return False, t('invalid')
        
        if not check_password(user['password'], password):
            # Increment failed login attempt
            c.execute('''UPDATE users 
                         SET login_attempts = login_attempts + 1,
                             last_login = CURRENT_TIMESTAMP
                         WHERE username = ?''', (username,))
            conn.commit()
            return False, t('invalid')
        
        # Reset login attempts on success
        c.execute('''UPDATE users 
                     SET login_attempts = 0,
                         last_login = CURRENT_TIMESTAMP
                     WHERE username = ?''', (username,))
        conn.commit()
        
        user_data = dict(user)
        del user_data['password']  # Don't store password in session
        
        logger.info(f"User logged in: {username}")
        return True, user_data
        
    except sqlite3.Error as e:
        logger.error(f"Login error: {str(e)}")
        return False, t('database_error')
    finally:
        if conn:
            conn.close()

# =============================================
# Crop Data Functions
# =============================================

def add_crop_record(username, crop_data):
    """Add a new crop record to database"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        c.execute('''INSERT INTO crop_history 
                    (username, crop, planted_date, harvested_date, yield_amount, notes)
                    VALUES (?, ?, ?, ?, ?, ?)''',
                 (username, crop_data['crop'], crop_data['planted'], 
                  crop_data['harvested'], crop_data['yield'], crop_data['notes']))
        conn.commit()
        
        return True, t('record_added')
    except sqlite3.Error as e:
        logger.error(f"Crop record error: {str(e)}")
        return False, t('record_failed')
    finally:
        if conn:
            conn.close()

def get_crop_history(username):
    """Get crop history for a user"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        c.execute('''SELECT id, crop, planted_date, harvested_date, yield_amount, notes
                     FROM crop_history 
                     WHERE username = ?
                     ORDER BY planted_date DESC''', (username,))
        
        records = [dict(row) for row in c.fetchall()]
        return records
    except sqlite3.Error as e:
        logger.error(f"Crop history error: {str(e)}")
        return []
    finally:
        if conn:
            conn.close()

# =============================================
# Disease Detection Functions
# =============================================

def save_uploaded_file(uploaded_file, username):
    """Save uploaded file to assets directory"""
    try:
        # Create user directory if not exists
        user_dir = os.path.join(Config.ASSETS_DIR, username)
        os.makedirs(user_dir, exist_ok=True)
        
        # Generate unique filename
        file_ext = os.path.splitext(uploaded_file.name)[1]
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"leaf_{timestamp}{file_ext}"
        filepath = os.path.join(user_dir, filename)
        
        # Save file
        with open(filepath, "wb") as f:
            f.write(uploaded_file.getbuffer())
            
        return filepath
    except Exception as e:
        logger.error(f"File save error: {str(e)}")
        return None

def predict_disease(image_path):
    """Predict disease from image (mock implementation)"""
    try:
        # In a real app, this would use a trained ML model
        # For now, we'll mock the response with translations
        diseases = {
            "Healthy": {
                "en": "Healthy",
                "hi": "рд╕реНрд╡рд╕реНрде",
                "mr": "рдирд┐рд░реЛрдЧреА"
            },
            "Powdery Mildew": {
                "en": "Powdery Mildew",
                "hi": "рдкрд╛рдЙрдбрд░ рдлрдлреВрдВрджреА",
                "mr": "рдкрд╛рд╡рдбрд░ рдмреБрд░рд╢реА"
            },
            "Leaf Rust": {
                "en": "Leaf Rust",
                "hi": "рдкрддреНрддреА рдХреА рдЬрдВрдЧ",
                "mr": "рдкрд╛рдирд╛рдВрдЪреА рдЧрдВрдЬ"
            },
            "Bacterial Blight": {
                "en": "Bacterial Blight",
                "hi": "рдЬреАрд╡рд╛рдгреБ рдЭреБрд▓рд╕рд╛",
                "mr": "рдЬреАрд╡рд╛рдгреВ рдЭреБрд▓рд╕рд╛"
            },
            "Leaf Spot": {
                "en": "Leaf Spot",
                "hi": "рдкрддреНрддреА рдзрдмреНрдмрд╛",
                "mr": "рдкрд╛рди рдбрд╛рдЧ"
            }
        }
        
        disease_key = random.choice(list(diseases.keys()))
        disease_name = diseases[disease_key].get(st.session_state.get('language', 'en'), disease_key)
        confidence = round(random.uniform(80, 99), 1)
        
        # Treatment advice with translations
        treatments = {
            "Healthy": {
                "en": "No treatment needed. Maintain current care regimen.",
                "hi": "рдХрд┐рд╕реА рдЙрдкрдЪрд╛рд░ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рдирд╣реАрдВ рд╣реИред рд╡рд░реНрддрдорд╛рди рджреЗрдЦрднрд╛рд▓ рд╡реНрдпрд╡рд╕реНрдерд╛ рдмрдирд╛рдП рд░рдЦреЗрдВред",
                "mr": "рдЙрдкрдЪрд╛рд░рд╛рдЪреА рдЧрд░рдЬ рдирд╛рд╣реА. рд╕рдзреНрдпрд╛рдЪреА рдХрд╛рд│рдЬреА рд╡реНрдпрд╡рд╕реНрдерд╛ рд░рд╛рдЦрд╛."
            },
            "Powdery Mildew": {
                "en": "Apply sulfur or potassium bicarbonate treatments.",
                "hi": "рд╕рд▓реНрдлрд░ рдпрд╛ рдкреЛрдЯреЗрд╢рд┐рдпрдо рдмрд╛рдЗрдХрд╛рд░реНрдмреЛрдиреЗрдЯ рдЙрдкрдЪрд╛рд░ рд▓рдЧрд╛рдПрдВред",
                "mr": "рд╕рд▓реНрдлрд░ рдХрд┐рдВрд╡рд╛ рдкреЛрдЯреЕрд╢рд┐рдпрдо рдмрд╛рдпрдХрд╛рд░реНрдмреЛрдиреЗрдЯ рдЙрдкрдЪрд╛рд░ рд▓рд╛рд╡рд╛."
            },
            "Leaf Rust": {
                "en": "Remove infected leaves and apply fungicide.",
                "hi": "рд╕рдВрдХреНрд░рдорд┐рдд рдкрддреНрддрд┐рдпреЛрдВ рдХреЛ рд╣рдЯрд╛рдХрд░ рдлрдлреВрдВрджрдирд╛рд╢рдХ рд▓рдЧрд╛рдПрдВред",
                "mr": "рд╕рдВрд╕рд░реНрдЧ рдЭрд╛рд▓реЗрд▓реА рдкрд╛рдиреЗ рдХрд╛рдвреВрди рдЯрд╛рдХрд╛ рдЖрдгрд┐ рдлрдВрдЧрд┐рд╕рд╛рдЗрдб рд▓рд╛рд╡рд╛."
            },
            "Bacterial Blight": {
                "en": "Apply copper-based bactericides and remove infected plants.",
                "hi": "рдХреЙрдкрд░ рдЖрдзрд╛рд░рд┐рдд рдЬреАрд╡рд╛рдгреБрдирд╛рд╢рдХ рд▓рдЧрд╛рдПрдВ рдФрд░ рд╕рдВрдХреНрд░рдорд┐рдд рдкреМрдзреЛрдВ рдХреЛ рд╣рдЯрд╛ рджреЗрдВред",
                "mr": "рдХреЙрдкрд░-рдЖрдзрд╛рд░рд┐рдд рдмреЕрдХреНрдЯреЗрд░рд┐рд╕рд╛рдЗрдб рд▓рд╛рд╡рд╛ рдЖрдгрд┐ рд╕рдВрд╕рд░реНрдЧ рдЭрд╛рд▓реЗрд▓реНрдпрд╛ рд╡рдирд╕реНрдкрддреА рдХрд╛рдвреВрди рдЯрд╛рдХрд╛."
            },
            "Leaf Spot": {
                "en": "Apply fungicide and improve air circulation.",
                "hi": "рдлрдлреВрдВрджрдирд╛рд╢рдХ рд▓рдЧрд╛рдПрдВ рдФрд░ рд╣рд╡рд╛ рдХреЗ рд╕рдВрдЪрд╛рд░ рдореЗрдВ рд╕реБрдзрд╛рд░ рдХрд░реЗрдВред",
                "mr": "рдлрдВрдЧрд┐рд╕рд╛рдЗрдб рд▓рд╛рд╡рд╛ рдЖрдгрд┐ рд╣рд╡реЗрдЪреНрдпрд╛ рдлреЗрд░рдлрдЯрдХреНрдпрд╛рдд рд╕реБрдзрд╛рд░рдгрд╛ рдХрд░рд╛."
            }
        }
        
        treatment = treatments.get(disease_key, {}).get(
            st.session_state.get('language', 'en'), 
            t('consult_expert')
        )
        
        return {
            "disease": disease_name,
            "confidence": confidence,
            "treatment": treatment
        }
    except Exception as e:
        logger.error(f"Disease prediction error: {str(e)}")
        return None

def save_detection_result(username, image_path, result):
    """Save disease detection result to database"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        c.execute('''INSERT INTO disease_history
                    (username, image_path, disease_name, confidence, treatment_advice)
                    VALUES (?, ?, ?, ?, ?)''',
                 (username, image_path, result['disease'], 
                  result['confidence'], result['treatment']))
        conn.commit()
        
        return True
    except sqlite3.Error as e:
        logger.error(f"Detection save error: {str(e)}")
        return False
    finally:
        if conn:
            conn.close()

def get_detection_history(username):
    """Get disease detection history for a user"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        c.execute('''SELECT id, image_path, detection_date, disease_name, confidence
                     FROM disease_history
                     WHERE username = ?
                     ORDER BY detection_date DESC''', (username,))
        
        records = [dict(row) for row in c.fetchall()]
        return records
    except sqlite3.Error as e:
        logger.error(f"Detection history error: {str(e)}")
        return []
    finally:
        if conn:
            conn.close()

# =============================================
# Weather Functions
# =============================================

def get_cached_weather(location):
    """Get cached weather data if recent"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        c.execute('''SELECT data, last_updated 
                     FROM weather_cache 
                     WHERE location = ? 
                     AND datetime(last_updated) > datetime('now', '-1 hour')''',
                 (location,))
        result = c.fetchone()
        
        if result:
            return json.loads(result['data'])
        return None
    except sqlite3.Error as e:
        logger.error(f"Weather cache error: {str(e)}")
        return None
    finally:
        if conn:
            conn.close()

def cache_weather(location, data):
    """Cache weather data"""
    try:
        conn = get_db_connection()
        c = conn.cursor()
        
        c.execute('''INSERT OR REPLACE INTO weather_cache
                    (location, data)
                    VALUES (?, ?)''',
                 (location, json.dumps(data)))
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Weather cache update error: {str(e)}")
    finally:
        if conn:
            conn.close()

def get_weather_forecast(location):
    """Get weather forecast with caching"""
    # Check cache first
    cached_data = get_cached_weather(location)
    if cached_data:
        return cached_data
    
    try:
        # In a real app, this would call a weather API
        days = 7
        base_temp = random.uniform(15, 30)
        
        forecast_data = {
            "location": location,
            "current": {
                "temp": round(base_temp, 1),
                "humidity": random.randint(40, 80),
                "wind_speed": round(random.uniform(5, 25), 1),
                "precipitation": random.randint(0, 30),
                "uv_index": random.choice(["Low", "Moderate", "High"])
            },
            "forecast": [
                {
                    "date": (datetime.now() + timedelta(days=i)).strftime("%Y-%m-%d"),
                    "temp": round(base_temp + random.uniform(-5, 5), 1),
                    "precipitation": random.randint(0, 30),
                    "wind_speed": round(random.uniform(5, 25), 1)
                } for i in range(days)
            ]
        }
        
        # Cache the result
        cache_weather(location, forecast_data)
        
        return forecast_data
    except Exception as e:
        logger.error(f"Weather forecast error: {str(e)}")
        return None

# =============================================
# Utility Functions
# =============================================

def load_lottieurl(url):
    """Load Lottie animation from URL"""
    try:
        r = requests.get(url)
        if r.status_code == 200:
            return r.json()
        return None
    except Exception as e:
        logger.error(f"Lottie load error: {str(e)}")
        return None

def predict_yield(crop, season, state, area, rainfall, fertilizer, pesticide):
    """Improved yield prediction with more realistic factors"""
    # Base yields (tons/hectare) from agricultural research
    base_yields = {
        "Rice": 3.5, "Wheat": 2.8, "Maize": 4.2, 
        "Cotton": 1.8, "Soybean": 2.5, "Potato": 20.0
    }
    
    # State productivity factors
    state_factors = {
        "Punjab": 1.15, "Haryana": 1.10, "Uttar Pradesh": 1.05,
        "Maharashtra": 1.0, "Karnataka": 0.95, "Others": 0.90
    }
    
    # Season adjustments
    season_factors = {
        "Kharif": 1.0, "Rabi": 1.05, "Zaid": 0.95, 
        "Summer": 0.90, "Winter": 1.02
    }
    
    base = base_yields.get(crop, 3.0)
    state_factor = state_factors.get(state, state_factors["Others"])
    season_factor = season_factors.get(season, 1.0)
    
    # Calculate yield components
    rainfall_factor = 0.8 + (rainfall / 1000) * 0.2  # 0.8-1.2 range
    fertilizer_factor = 0.9 + (fertilizer / 200) * 0.3  # 0.9-1.2 range
    pesticide_factor = 1.1 - (pesticide / 50) * 0.2  # 1.1-0.9 range
    
    # Combine factors
    yield_estimate = (base * area * state_factor * season_factor * 
                     rainfall_factor * fertilizer_factor * pesticide_factor)
    
    # Add small random variation (5%)
    yield_estimate *= random.uniform(0.95, 1.05)
    
    return max(1.0, round(yield_estimate, 2))  # Ensure minimum yield

def get_image_base64(image_path):
    """Convert image to base64 for HTML display"""
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode('utf-8')
    except Exception as e:
        logger.error(f"Image conversion error: {str(e)}")
        return ""

# =============================================
# UI Components
# =============================================

def show_login_form():
    """Render login form UI"""
    with st.container():
        st.markdown(f"""
        <div style="max-width: 400px; margin: 0 auto; padding: 20px; 
                    border-radius: 10px; background: rgba(255,255,255,0.1);">
            <h2 style="text-align: center;">{t('login')}</h2>
        </div>
        """, unsafe_allow_html=True)
        
        if st.session_state.get('lottie_login'):
            st_lottie(st.session_state.lottie_login, height=150, key="login-anim")
        
        with st.form("login_form"):
            username = st.text_input(t('username'))
            password = st.text_input(t('password'), type="password")
            
            col1, col2 = st.columns(2)
            with col1:
                login_submit = st.form_submit_button(t('login_button'))
            with col2:
                register_btn = st.form_submit_button(t('need_account'))
            
            if login_submit:
                success, result = login_user(username, password)
                if success:
                    st.session_state.logged_in = True
                    st.session_state.user = result
                    st.success(t('welcome'))
                    time.sleep(1)
                    st.rerun()
                else:
                    st.error(result)
            
            if register_btn:
                st.session_state.show_register = True
                st.rerun()

def show_register_form():
    """Render registration form UI"""
    with st.container():
        st.markdown(f"""
        <div style="max-width: 400px; margin: 0 auto; padding: 20px; 
                    border-radius: 10px; background: rgba(255,255,255,0.1);">
            <h2 style="text-align: center;">{t('register')}</h2>
        </div>
        """, unsafe_allow_html=True)
        
        if st.session_state.get('lottie_login'):
            st_lottie(st.session_state.lottie_login, height=150, key="register-anim")
        
        with st.form("register_form"):
            username = st.text_input(t('username'))
            name = st.text_input(t('name'))
            email = st.text_input(t('email'))
            farm_size = st.number_input(t('farm_size'), 
                                      min_value=0.1, 
                                      value=Config.DEFAULT_FARM_SIZE, 
                                      step=0.5)
            location = st.text_input(t('location'))
            password = st.text_input(t('password'), type="password")
            confirm_password = st.text_input(t('confirm_password'), type="password")
            
            col1, col2 = st.columns(2)
            with col1:
                register_submit = st.form_submit_button(t('register_button'))
            with col2:
                login_btn = st.form_submit_button(t('have_account'))
            
            if register_submit:
                if password != confirm_password:
                    st.error(t('password_mismatch'))
                else:
                    success, message = register_user(
                        username, password, name, email, farm_size, location
                    )
                    if success:
                        st.success(message)
                        time.sleep(1)
                        st.session_state.show_register = False
                        st.rerun()
                    else:
                        st.error(message)
            
            if login_btn:
                st.session_state.show_register = False
                st.rerun()

def show_sidebar():
    """Render application sidebar"""
    with st.sidebar:
        st.markdown(f"""
        <div style="border-radius: 10px; padding: 20px; background: rgba(255,255,255,0.1);">
            <h3>{t('profile')}</h3>
            <p><strong>{st.session_state.user['name']}</strong></p>
            <p>ЁЯУН {st.session_state.user.get('location', t('unknown'))}</p>
            <p>ЁЯМ▒ {st.session_state.user.get('farm_size', Config.DEFAULT_FARM_SIZE)} {t('area')}</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button(t('logout')):
            st.session_state.clear()
            st.rerun()
        
        # Language selector
        selected_lang = st.selectbox(
            "ЁЯМР " + t('language'),
            options=list(translations.keys()),
            index=list(translations.keys()).index(st.session_state.get('language', 'en')),
            format_func=lambda x: {"en": "English", "hi": "рд╣рд┐рдВрджреА", "mr": "рдорд░рд╛рдареА"}[x]
        )
        st.session_state.language = selected_lang

def show_home_page():
    """Render home page content"""
    st.title(f"ЁЯМ╛ {t('hero_title')}")
    st.write(t('hero_subtitle'))
    
    # Load animations
    lottie_agro = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_vybwn7df.json")
    if lottie_agro:
        st_lottie(lottie_agro, height=300, key="home-anim")
    
    st.markdown("---")
    st.header(t('features_title'))
    
    cols = st.columns(3)
    features = [
        ("ЁЯМ┐ " + t('crop_yield'), t('yield_prediction_desc')),
        ("ЁЯжа " + t('disease_detect'), t('disease_detection_desc')),
        ("ЁЯУК " + t('dashboard'), t('analytics_desc')),
        ("ЁЯМжя╕П " + t('weather'), t('weather_desc')),
        ("ЁЯМ▒ " + t('soil_health'), t('soil_health_desc')),
        ("ЁЯТ░ " + t('market_prices'), t('market_insights_desc'))
    ]
    
    for i, (title, desc) in enumerate(features):
        with cols[i % 3]:
            st.markdown(f"""
            <div style="border-radius: 10px; padding: 15px; margin-bottom: 15px; 
                        background: rgba(255,255,255,0.1); border-left: 4px solid #4CAF50;">
                <h4>{title}</h4>
                <p>{desc}</p>
            </div>
            """, unsafe_allow_html=True)

def show_yield_page():
    """Render crop yield prediction page"""
    st.header(t('yield_form_title'))
    
    lottie_yield = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_5tkzkblw.json")
    if lottie_yield:
        st_lottie(lottie_yield, height=200, key="yield-anim")
    
    with st.form("yield_form"):
        col1, col2 = st.columns(2)
        with col1:
            crop = st.selectbox(t('crop'), ["Rice", "Wheat", "Maize", "Cotton", "Soybean", "Potato"])
            season = st.selectbox(t('season'), ["Kharif", "Rabi", "Zaid", "Summer", "Winter"])
            state = st.selectbox(t('state'), ["Maharashtra", "Punjab", "Tamil Nadu", "Uttar Pradesh", "Karnataka", "Gujarat"])
        with col2:
            area = st.number_input(t('area'), min_value=0.1, value=float(st.session_state.user.get('farm_size', Config.DEFAULT_FARM_SIZE)), step=0.1)
            rainfall = st.slider(t('rainfall'), min_value=0, max_value=2000, value=800)
            fertilizer = st.slider(t('fertilizer'), min_value=0, max_value=200, value=50)
            pesticide = st.slider(t('pesticide'), min_value=0, max_value=50, value=5)
        
        if st.form_submit_button(t('predict')):
            with st.spinner(t('calculating_yield')):
                time.sleep(1)  # Simulate processing
                result = predict_yield(crop, season, state, area, rainfall, fertilizer, pesticide)
                st.success(f"{t('predicted_yield')}: {result:.2f} {t('tons_per_hectare')}")
                
                # Show comparison chart
                data = pd.DataFrame({
                    'Metric': [t('your_prediction'), t('region_avg'), t('best_in_region')],
                    'Yield': [result, result*0.8, result*1.3]
                })
                
                fig = px.bar(data, x='Metric', y='Yield', color='Metric',
                            color_discrete_sequence=['#4CAF50', '#FFC107', '#2E7D32'])
                st.plotly_chart(fig, use_container_width=True)
                
                # Yield tips
                with st.expander(t('yield_tips_title')):
                    for tip in t('yield_tips'):
                        st.markdown(f"тЬЕ {tip}")

def show_disease_page():
    """Render disease detection page"""
    st.header(t('disease_form_title'))
    
    lottie_disease = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_ygiuluqn.json")
    if lottie_disease:
        st_lottie(lottie_disease, height=200, key="disease-anim")
    
    st.markdown(f"""
    <div style="border-radius: 10px; padding: 15px; margin-bottom: 20px; 
                background: rgba(255,255,255,0.1);">
        <h4>ЁЯУМ {t('instructions')}</h4>
        <p>{t('for_best_results')}:</p>
        <ul>
            <li>{t('upload_clear_image')}</li>
            <li>{t('leaf_should_cover')}</li>
            <li>{t('use_natural_light')}</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    tab1, tab2 = st.tabs([t('upload_image'), t('capture_image')])
    
    with tab1:
        uploaded_file = st.file_uploader(t('choose_image'), type=["jpg", "jpeg", "png"])
        if uploaded_file:
            try:
                if uploaded_file.size > Config.MAX_UPLOAD_SIZE * 1024 * 1024:
                    st.error(f"{t('file_too_large')} {Config.MAX_UPLOAD_SIZE}MB")
                else:
                    image = Image.open(uploaded_file)
                    st.image(image, caption=t('uploaded_image'), use_container_width=True)
                    
                    if st.button(t('analyze')):
                        with st.spinner(t('analyzing_image')):
                            # Save the uploaded file
                            image_path = save_uploaded_file(uploaded_file, st.session_state.user['username'])
                            if image_path:
                                # Predict disease
                                result = predict_disease(image_path)
                                if result:
                                    st.success(f"{t('detected')}: {result['disease']} ({result['confidence']}% {t('confidence')})")
                                    
                                    # Save detection result
                                    save_detection_result(
                                        st.session_state.user['username'],
                                        image_path,
                                        result
                                    )
                                    
                                    # Show treatment advice
                                    with st.expander(t('treatment_title')):
                                        st.markdown(result['treatment'])
                                else:
                                    st.error(t('analysis_failed'))
            except Exception as e:
                st.error(f"{t('error_processing')}: {str(e)}")
    
    with tab2:
        img_file_buffer = st.camera_input(t('camera_instructions'))
        if img_file_buffer:
            try:
                image = Image.open(img_file_buffer)
                st.image(image, caption=t('captured_image'), use_container_width=True)
                
                if st.button(t('analyze_button')):
                    with st.spinner(t('analyzing_image')):
                        # Save the captured image
                        image_path = save_uploaded_file(img_file_buffer, st.session_state.user['username'])
                        if image_path:
                            # Predict disease
                            result = predict_disease(image_path)
                            if result:
                                st.success(f"{t('detected')}: {result['disease']} ({result['confidence']}% {t('confidence')})")
                                
                                # Save detection result
                                save_detection_result(
                                    st.session_state.user['username'],
                                    image_path,
                                    result
                                )
                                
                                # Show treatment advice
                                with st.expander(t('treatment_title')):
                                    st.markdown(result['treatment'])
                            else:
                                st.error(t('analysis_failed'))
            except Exception as e:
                st.error(f"{t('error_processing')}: {str(e)}")

def show_dashboard_page():
    """Render analytics dashboard page"""
    st.header(t('dashboard_title'))
    
    # Main layout
    main_col, side_col = st.columns([3, 1])
    
    with main_col:
        # Yield Trends Chart
        st.subheader(t('yield_trends'))
        crop_history = get_crop_history(st.session_state.user['username'])
        if crop_history:
            df = pd.DataFrame(crop_history)
            df['planted_date'] = pd.to_datetime(df['planted_date'])
            df = df.sort_values('planted_date')
            
            fig = px.line(
                df,
                x='planted_date',
                y='yield_amount',
                color='crop',
                markers=True,
                title=t('yield_over_time')
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info(t('no_records'))
        
        # Disease Detection History
        st.subheader(t('disease_history'))
        detection_history = get_detection_history(st.session_state.user['username'])
        if detection_history:
            for detection in detection_history:
                with st.expander(f"{detection['disease_name']} - {detection['detection_date']}"):
                    col1, col2 = st.columns([1, 2])
                    with col1:
                        if os.path.exists(detection['image_path']):
                            st.image(detection['image_path'], use_column_width=True)
                    with col2:
                        st.markdown(f"**{t('confidence')}:** {detection['confidence']}%")
                        st.markdown(f"**{t('date')}:** {detection['detection_date']}")
        else:
            st.info(t('no_disease_records'))
    
    with side_col:
        # Quick Stats
        st.subheader(t('farm_stats'))
        if crop_history:
            df = pd.DataFrame(crop_history)
            avg_yield = df['yield_amount'].mean()
            last_crop = df.iloc[0]['crop'] if len(df) > 0 else t('none')
            total_yield = df['yield_amount'].sum()
            
            st.metric(t('avg_yield'), f"{avg_yield:.1f} {t('tons')}")
            st.metric(t('last_crop'), last_crop)
            st.metric(t('total_yield'), f"{total_yield:.1f} {t('tons')}")
        else:
            st.info(t('no_data'))
        
        # Add Crop Form
        with st.expander(t('add_crop')):
            with st.form("add_crop_form"):
                crop_name = st.text_input(t('crop_name'))
                col1, col2 = st.columns(2)
                with col1:
                    planting_date = st.date_input(t('planting_date'))
                with col2:
                    harvest_date = st.date_input(t('harvest_date'))
                yield_amount = st.number_input(t('yield_amount'), min_value=0.0, step=0.1)
                notes = st.text_area(t('notes'))
                
                if st.form_submit_button(t('add_record')):
                    crop_data = {
                        "crop": crop_name,
                        "planted": str(planting_date),
                        "harvested": str(harvest_date),
                        "yield": yield_amount,
                        "notes": notes
                    }
                    success, message = add_crop_record(st.session_state.user['username'], crop_data)
                    if success:
                        st.success(message)
                        st.rerun()
                    else:
                        st.error(message)

def show_weather_page():
    """Render weather forecast page"""
    st.header(t('weather_title'))
    
    lottie_weather = load_lottieurl("https://assets5.lottiefiles.com/packages/lf20_nKwET0.json")
    if lottie_weather:
        st_lottie(lottie_weather, height=200, key="weather-anim")
    
    location = st.text_input(t('enter_location'), value=st.session_state.user.get('location', ''))
    
    if location:
        with st.spinner(t('fetching_weather')):
            forecast = get_weather_forecast(location)
            
            if forecast:
                # Current weather
                st.markdown(f"""
                <div style="border-radius: 10px; padding: 20px; margin-bottom: 20px; 
                            background: rgba(255,255,255,0.1);">
                    <h3>{t('current_weather_for')} {forecast['location']}</h3>
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="font-size: 3rem; font-weight: bold;">{forecast['current']['temp']}┬░C</div>
                        <div>
                            <p>ЁЯМзя╕П {t('precipitation')}: {forecast['current']['precipitation']}%</p>
                            <p>ЁЯТи {t('wind')}: {forecast['current']['wind_speed']} km/h</p>
                            <p>тШАя╕П {t('uv_index')}: {forecast['current']['uv_index']}</p>
                        </div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
                
                # Forecast chart
                st.subheader(t('forecast_7days'))
                forecast_df = pd.DataFrame(forecast['forecast'])
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=forecast_df['date'],
                    y=forecast_df['temp'],
                    name=t('temperature'),
                    line=dict(color='#FFC107', width=4),
                    mode='lines+markers'
                ))
                fig.add_trace(go.Bar(
                    x=forecast_df['date'],
                    y=forecast_df['precipitation'],
                    name=t('precipitation'),
                    marker_color='#2196F3'
                ))
                st.plotly_chart(fig, use_container_width=True)
                
                # Farming recommendations
                st.subheader(t('farming_recommendations'))
                cols = st.columns(3)
                with cols[0]:
                    st.markdown(f"""
                    <div style="border-radius: 10px; padding: 15px; background: rgba(255,255,255,0.1);">
                        <h4>ЁЯМ▒ {t('planting')}</h4>
                        <p>{t('optimal_time_for')}:</p>
                        <p>тАв {t('wheat')}</p>
                        <p>тАв {t('barley')}</p>
                    </div>
                    """, unsafe_allow_html=True)
                with cols[1]:
                    st.markdown(f"""
                    <div style="border-radius: 10px; padding: 15px; background: rgba(255,255,255,0.1);">
                        <h4>ЁЯТз {t('irrigation')}</h4>
                        <p>{t('reduce_watering')} 20%</p>
                        <p>{t('expected_rainfall')}: 15mm</p>
                    </div>
                    """, unsafe_allow_html=True)
                with cols[2]:
                    st.markdown(f"""
                    <div style="border-radius: 10px; padding: 15px; background: rgba(255,255,255,0.1);">
                        <h4>ЁЯЫбя╕П {t('protection')}</h4>
                        <p>тАв {t('cover_plants')}</p>
                        <p>тАв {t('check_drainage')}</p>
                    </div>
                    """, unsafe_allow_html=True)
            else:
                st.error(t('weather_fetch_failed'))

def show_about_page():
    """Render about page"""
    st.header(t('about_title'))
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown(f"""
        <div style="border-radius: 10px; padding: 20px; background: rgba(255,255,255,0.1);">
            <h2>{t('mission')}</h2>
            <p>{t('mission_text')}</p>
        </div>
        """, unsafe_allow_html=True)
    with col2:
        st.markdown(f"""
        <div style="border-radius: 10px; padding: 20px; background: rgba(255,255,255,0.1);">
            <h2>{t('vision')}</h2>
            <p>{t('vision_text')}</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.subheader(t('features_title'))
    
    cols = st.columns(3)
    features = [
        (t('ai_detection'), t('ai_detection_desc')),
        (t('real_time_analysis'), t('real_time_analysis_desc')),
        (t('easy_to_use'), t('easy_to_use_desc'))
    ]
    
    for i, (title, desc) in enumerate(features):
        with cols[i]:
            st.markdown(f"""
            <div style="border-radius: 10px; padding: 15px; margin-bottom: 15px; 
                        background: rgba(255,255,255,0.1);">
                <h4>{title}</h4>
                <p>{desc}</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.subheader(t('team'))
    
    for member in t('team_members'):
        st.markdown(f"""
        <div style="border-radius: 10px; padding: 15px; margin-bottom: 15px; 
                    background: rgba(255,255,255,0.1); border-top: 4px solid #FFC107;">
            <h4>{member['name']}</h4>
            <p><strong>{member['role']}</strong></p>
            <p>{member['bio']}</p>
        </div>
        """, unsafe_allow_html=True)

def show_contact_page():
    """Render contact page"""
    st.header(t('contact_title'))
    
    cols = st.columns(2)
    with cols[0]:
        st.subheader(t('get_in_touch'))
        st.write(t('contact_us_message'))
        
        for info in t('contact_info'):
            st.markdown(f"- {info}")
    
    with cols[1]:
        st.subheader(t('send_message'))
        with st.form("contact_form"):
            name = st.text_input(t('your_name'))
            email = st.text_input(t('your_email'))
            subject = st.selectbox(t('subject'), 
                                 [t('general_inquiry'), t('tech_support'), t('feedback')])
            message = st.text_area(t('your_message'), height=150)
            
            if st.form_submit_button(t('send_message_button')):
                st.success(t('thank_you_message'))

# =============================================
# Main Application
# =============================================

def main():
    """Main application function"""
    
    # Initialize database
    init_db()
    
    # Load animations
    if 'lottie_login' not in st.session_state:
        st.session_state.lottie_login = load_lottieurl(
            "https://assets5.lottiefiles.com/packages/lf20_hu9cd9.json"
        )
    
    # Initialize session state
    if 'logged_in' not in st.session_state:
        st.session_state.logged_in = False
    if 'show_register' not in st.session_state:
        st.session_state.show_register = False
    if 'user' not in st.session_state:
        st.session_state.user = None
    if 'language' not in st.session_state:
        st.session_state.language = "en"
    
    # Authentication check
    if not st.session_state.logged_in:
        if st.session_state.show_register:
            show_register_form()
        else:
            show_login_form()
        return
    
    # Main app layout for authenticated users
    st.set_page_config(
        page_title="AgroAI Advisor",
        layout="wide",
        page_icon="ЁЯМ▒",
        menu_items={
            'Get Help': 'https://example.com/help',
            'Report a bug': "https://example.com/bug",
            'About': "# AgroAI Advisor v4.0"
        }
    )
    
    # Sidebar
    show_sidebar()
    
    # Navigation
    pages = {
        t('home'): show_home_page,
        t('crop_yield'): show_yield_page,
        t('disease_detect'): show_disease_page,
        t('dashboard'): show_dashboard_page,
        t('weather'): show_weather_page,
        t('about'): show_about_page,
        t('contact'): show_contact_page
    }
    
    # Page selection
    selected_page = st.selectbox(
        t('navigate'),
        options=list(pages.keys()),
        label_visibility="collapsed"
    )
    
    # Display the selected page
    pages[selected_page]()

if __name__ == "__main__":
    main()
